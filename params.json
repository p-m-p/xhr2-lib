{"tagline":"XMLHttpRequest Level 2 Library","google":"UA-10142508-2","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Xhr2-lib","body":"XMLHttpRequest Level 2 Ajax library\r\n===\r\n\r\nCurrent state of this project\r\n---\r\n\r\nThe [XMLHttpRequest level 2][1] specification is in draft and is not supported\r\nby any current version of Internet Explorer or Opera. Check the current\r\n[state of support for xhr2][5] for a more detailed summary.\r\n\r\nFor browsers that do support `xhr2-lib`--which can be checked during developemnt\r\nwith the `supported()` method--this library offers binary data transfer, upload\r\nprogress events and cross origin requests in a simple and light weight (3.5KB\r\nminified and gzipped) API modelled on parts of the jQuery Ajax library.\r\n\r\n`xhr2-lib` is also supported for use in [web workers][6]\r\n\r\nTests\r\n---\r\n\r\nNot yet exhaustive but tests can be run from /test/index.html.\r\n\r\nTODOs\r\n---\r\n* ~~Add support for responseType of `blob` and `arraybuffer`~~\r\n* Investigate and implement better handling of 304 responses\r\n\r\nDocumentation\r\n---\r\n\r\n###.supported()\r\n\r\nReturns true if the client browser supports xhr2lib, false otherwise.\r\n\r\n####Example\r\n```js\r\n<script>\r\n\r\n  if ($xhr.supported()) {\r\n    // do something amazing\r\n  }\r\n  else {\r\n    // take some other action\r\n  }\r\n\r\n</script>\r\n```\r\n\r\n###.defaultError(fn)\r\n\r\n+ **fn** - A Function\r\n\r\nThe `defaultError` method sets up a default error handler for all requests that\r\ndo not have an explicit error handler defined.\r\n\r\n####Example\r\n```js\r\n<script>\r\n\r\n  $xhr.defaultError(function (st, s) {\r\n    console.log(\"xhr: \", this); // error handler is bound to the xhr object\r\n    console.log(\"status text: \", st); // status text e.g. 'Not Found'\r\n    console.log(\"status: \", s); // status e.g.404\r\n  });\r\n\r\n  // 404 from the below invalid url will be handled by the above\r\n  $xhr.post(\"unknownpage.php\", {test: \"testing\"});\r\n\r\n</script>\r\n```\r\n\r\n###.defaultSuccess(fn)\r\n\r\n+ **fn** - A Function\r\n\r\nThe `defaultSuccess` method sets up a default success handler for all requests\r\nthat do not have an explicit success handler defined.\r\n\r\n####Example\r\n```js\r\n<nav>\r\n  <a href=\"home.html\">Home</a>\r\n  <a href=\"about.html\">About</a>\r\n  <a href=\"contact.html\">Contact</a>\r\n</nav>\r\n\r\n<div id=\"content\">\r\n  <!-- get some html and populate -->\r\n</div>\r\n\r\n<script>\r\n\r\n  (function () {\r\n    $xhr.defaultSuccess(function (html) {\r\n      document.getElementById(\"content\").innerHTML = html;\r\n    });\r\n\r\n    function swapContent (ev) {\r\n      $xhr.get(this.href);\r\n      ev.preventDefault();\r\n    }\r\n\r\n    // set links to load destination url into conent container\r\n    var nl = document.querySelectorAll(\"nav > a\")\r\n      , i = 0;\r\n\r\n    for (; i < nl.length; ++i) {\r\n      nl.item(i).addEventListener(\"click\", swapContent, false);\r\n    }\r\n  })();\r\n\r\n</script>\r\n```\r\n\r\n###.sendForm(form [, success, dataType] [, progress])\r\n\r\n+ **form** - A HTMLFormElement.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n+ **dataType** - Format of response data (default = HTML).\r\n+ **progress** - Event handler to run on the upload progress event emission.\r\n  This function will receive the percentage of the upload progress as it's only\r\n  parameter and is bound to the upload event object.\r\n\r\nThe `sendForm` method takes a HTML form element and sends it to the server. The\r\nrequest type and url are taken from the form\\'s action and method attributes\r\nrespectively and default to the current window location and POST if these\r\nattributes are not defined.\r\n\r\nThe `sendForm` method will also send file fields (see: [FormData Interface][3]).\r\n\r\n####Example\r\n```js\r\n<form action=\"test/server.php\" method=\"post\" id=\"example-form\">\r\n  ...\r\n</form>\r\n\r\n<script>\r\n\r\n  var form = document.getElementById(\"example-form\");\r\n\r\n  form.addEventListener(\"submit\", function showResponse (ev) {\r\n    ev.preventDefault();\r\n\r\n    $xhr.sendForm(form, function success(res) {\r\n      var elem = document.createElement('p');\r\n\r\n      elem.innerHTML = res;\r\n      form.appendChild(elem);\r\n    });\r\n  }, false);\r\n\r\n</script>\r\n```\r\n\r\n---\r\n\r\n###.sendFile(url, file [, success, dataType] [, progress])\r\n\r\n+ **url** - The URL to which the file is to be sent.\r\n+ **file** - File or Blob object to send.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n+ **dataType** - Format of response data (default = HTML).\r\n+ **progress** - Event handler to run on the upload progress event emission.\r\n  This function will receive the percentage of the upload progress as it's only\r\n  parameter and is bound to the upload event object.\r\n\r\nThe `sendFile` method takes a `File` or `Blob` object (see: [File API][2]) and\r\nsends it to the specified URL.\r\n\r\n####Example\r\n```js\r\n<form action=\"\" method=\"post\">\r\n  <input type=\"file\" id=\"file-field\" name=\"upload\" multiple>\r\n\r\n  <div id=\"progress-outer\">\r\n    <div id=\"progress-inner\"></div>\r\n  </div>\r\n</form>\r\n\r\n<script>\r\n\r\n  var sf = document.getElementById(\"file-field\")\r\n    , up = document.getElementById(\"progress-inner\");\r\n\r\n  sf.addEventListener(\"change\", function (ev) {\r\n    ev.preventDefault();\r\n\r\n    $xhr.sendFile(\r\n        \"test/server.php?isFile\"\r\n      , sf.files[0]\r\n      , function success(res) {\r\n          up.style.backgroundColor = \"#0F0\";\r\n          up.style.width = \"100%\";\r\n        }\r\n      , function progress(pct) {\r\n          up.style.width = pct + \"%\";\r\n        }\r\n      , \"text\"\r\n    );\r\n  });\r\n\r\n</script>\r\n```\r\n\r\n---\r\n\r\n###.get(url [, data] [,success, dataType])\r\n\r\n+ **url** - The URL from which to get data.\r\n+ **data** - Request data object to be sent to the server.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n+ **dataType** - Format of response data (default = HTML).\r\n\r\nThe `get` method is a short cut to the `ajax` method.\r\n\r\n####Example\r\n```js\r\n$xhr.get(\r\n    \"test/server.php\"\r\n  , { username: \"Joe bloggs\"}\r\n  , function success(html) {\r\n      document.getElementById(\"user-info\").innerHTML = html;\r\n    }\r\n);\r\n```\r\n\r\n---\r\n\r\n###.getJSON(url [, data] [,success])\r\n\r\n+ **url** - The URL from which to get data.\r\n+ **data** - Request data object to be sent to the server.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n\r\nThe `getJSON` method is a short cut to the `ajax` method where the desired\r\nresponse data type is JSON.\r\n\r\n####Example\r\n```js\r\n$xhr.getJSON(\r\n    \"test/server.php\"\r\n  , { username: \"Joe bloggs\"}\r\n  , function success(data) {\r\n      console.log(\"userid: \" + data.userid);\r\n      console.log(\"last login: \" + data.lastLogin);\r\n    }\r\n);\r\n```\r\n\r\n---\r\n\r\n###.getXML(url [, data] [,success])\r\n\r\n+ **url** - The URL from which to get data.\r\n+ **data** - Request data object to be sent to the server.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n\r\nThe `getXML` method is a short cut to the `ajax` method where the desired\r\nresponse data type is an XML Document/Fragment.\r\n\r\n####Example\r\n```js\r\n$xhr.getXML(\r\n    \"test/server.php\"\r\n  , { weather: \"London\" }\r\n  , function success(xml) {\r\n      console.log(xml.documentElement);\r\n    }\r\n);\r\n```\r\n\r\n---\r\n\r\n###.post(url [, data] [,success, dataType])\r\n\r\n+ **url** - The URL from which to get data.\r\n+ **data** - Request data object (Plain, FormData, File or Blob) to be sent to\r\n  the server.\r\n+ **success** - Callback function to run on successful completion of the\r\n  request. This function will receive the response data as it's only parameter.\r\n+ **dataType** - Format of response data (default = HTML).\r\n\r\nThe `post` method is a short cut to the `ajax` method.\r\n\r\n####Example\r\n```js\r\n$xhr.post(\r\n    \"test/server.php\"\r\n  , {\r\n        action: \"register new user\"\r\n      , username: \"Joe bloggs\"\r\n      , email: \"joe@bloggs.com\"\r\n      , telephone: \"0208 123 4567\"\r\n    }\r\n  , function success(json) {\r\n      console.log(\"userid: \" + json.newUserID);\r\n    }\r\n  , \"json\"\r\n);\r\n```\r\n\r\n---\r\n\r\n###.ajax(settings)\r\n\r\n**settings** - The request settings consisting of:\r\n\r\n+ **url** - The URL to which the request is to be sent.\r\n+ **type** - The type of HTTP request (default = GET).\r\n+ **dataType** - Format of the response data (default = HTML).\r\n+ **async** - Flag to determine if request should be made asynchronously (\r\n    default = true).\r\n+ **username** - Username to be used for access authentication.\r\n+ **password** - Password to be used for access authentication.\r\n+ **success** - Callback function to run on successful completion of the\r\n    request. This function will receive the response data as it's only parameter\r\n    and is bound to the client XMLHttpRequest object.\r\n+ **progress** - Event handler to run on the upload progress event emission.\r\n    This function will receive the percentage of the upload progress as it's only\r\n    parameter and is bound to the upload event object.\r\n+ **headers** - A map of additional HTTP request headers.\r\n+ **error** - Function to run if the request fails. The error function will be\r\n    bound to the client XMLHttpRequest object and has the status text and status\r\n    as it's only two parameters.\r\n+ **timeout** - The number of milliseconds to wait before timing out the\r\n    request.\r\n+ **withCredentials** - True if user credentials should be sent with cross-origin\r\n    requests (see [CORS example][4]) (default = false)\r\n\r\nThe `ajax` method is the core of the library and is utilised by all of the short\r\ncut methods outlined above.\r\n\r\n####Example\r\n```js\r\n$xhr.ajax({\r\n    url: \"http://www.somecorsdomain.com\"\r\n  , data: { query: \"some api call\" }\r\n  , type: \"get\"\r\n  , timeout: 5000\r\n  , success: function (data) {\r\n      console.log(data);\r\n    }\r\n  , dataType: \"json\"\r\n});\r\n```\r\n\r\nLicense\r\n---\r\nCopyright (c) 2012 Phil Parsons\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[1]: http://dev.w3.org/2006/webapi/XMLHttpRequest-2/\r\n[2]: http://www.w3.org/TR/FileAPI/\r\n[3]: http://www.w3.org/TR/XMLHttpRequest2/#the-formdata-interface\r\n[4]: http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/\r\n[5]: http://caniuse.com/xhr2\r\n[6]: http://dev.w3.org/html5/workers/\r\n"}